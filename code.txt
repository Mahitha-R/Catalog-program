#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int base_to_decimal(const char *value, int base) {
    int result = 0;
    int length = strlen(value);
    for (int i = 0; i < length; i++) {
        char digit = value[i];
        result = result * base + (digit - '0');
    }
    return result;
}

int parse_json(FILE *file, int *x_values, int *y_values, int *n, int *k) {
    char buffer[1024];
    fscanf(file, "%s", buffer);
    sscanf(strstr(buffer, "\"n\":") + 5, "%d", n);
    sscanf(strstr(buffer, "\"k\":") + 5, "%d", k);
    char *root = strstr(buffer, "\"1\":");
    int i = 0;
    while (root) {
        int base;
        char value[50];
        sscanf(strstr(root, "\"base\":") + 8, "%d", &base);
        sscanf(strstr(root, "\"value\":") + 9, "%[^\"]", value);
        x_values[i] = i + 1;
        y_values[i] = base_to_decimal(value, base);
        i++;
        char key[5];
        sprintf(key, "\"%d\":", i + 1);
        root = strstr(buffer, key);
    }
    return i;
}

int lagrange_interpolation(int *x, int *y, int k) {
    double result = 0.0;
    for (int i = 0; i < k; i++) {
        double term = y[i];
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term *= (0.0 - x[j]) / (x[i] - x[j]);
            }
        }
        result += term;
    }
    return (int)round(result);
}

int main() {
    FILE *file = fopen("input.json", "r");
    if (!file) {
        perror("Could not open file");
        return 1;
    }
    
    int x_values[100], y_values[100];
    int n, k;
    int num_roots = parse_json(file, x_values, y_values, &n, &k);
    fclose(file);
    
    if (num_roots < k) {
        printf("Not enough roots provided.\n");
        return 1;
    }
    
    int secret = lagrange_interpolation(x_values, y_values, k);
    printf("Secret constant term (c): %d\n", secret);
    
    return 0;
}